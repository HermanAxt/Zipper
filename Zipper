import Foundation

final class Zipper {
    
    static let shared = Zipper()
    
    let fm = FileManager.default
    
    private init() {}
    
}

//MARK: Methods
extension Zipper {
    
    func zip(data: [NSData?], fileTypes: [FileType]) throws -> NSData {
        var tmpURLs: [URL] = []
        for d in data {
            let tmpURL = URL(fileURLWithPath: NSTemporaryDirectory()).appendingPathComponent(UUID().uuidString)
            //TODO: Unwrap safely!
            try d!.write(to: tmpURL, options: NSData.WritingOptions.atomic)
            tmpURLs.append(tmpURL)
        }
        let zipURL = try zip(urls: tmpURLs, fileTypes: fileTypes)
        let fm = FileManager.default
        let zippedData = try NSData(contentsOf: zipURL, options: NSData.ReadingOptions())
        for tmpURL in tmpURLs {
            try fm.removeItem(at: tmpURL) // clean up
        }
        try fm.removeItem(at: zipURL)
        return zippedData
    }

    func zip(urls: [URL], fileTypes: [FileType]) throws -> URL {
        
        let destURL = urls.first!.appendingPathExtension("zip")
        
        let srcDir: URL
        let srcDirIsTemporary: Bool
        
        // we need to copy the simple file to a temporary directory in order for
        // NSFileCoordinatorReadingOptions.ForUploading to actually zip it up
        srcDir = URL(fileURLWithPath: NSTemporaryDirectory()).appendingPathComponent(UUID().uuidString)
        try fm.createDirectory(at: srcDir, withIntermediateDirectories: true, attributes: nil)
        for url in urls {
            let tmpURL = srcDir.appendingPathComponent(url.lastPathComponent + (fileTypes.first?.rawValue ?? ".jpeg"))
            try fm.copyItem(at: url, to: tmpURL)
        }
        srcDirIsTemporary = true
        
        let coord = NSFileCoordinator()
        var readError: NSError?
        var copyError: NSError?
        var errorToThrow: NSError?
        
        var readSucceeded: Bool = false
        // coordinateReadingItemAtURL is invoked synchronously, but the passed in zippedURL is only valid
        // for the duration of the block, so it needs to be copied out
        coord.coordinate(readingItemAt: srcDir,
                         options: NSFileCoordinator.ReadingOptions.forUploading,
                         error: &readError)
        {
            (zippedURL: URL) -> Void in
            readSucceeded = true
            // assert: read succeeded
            do {
                try fm.copyItem(at: zippedURL, to: destURL)
            } catch let caughtCopyError {
                copyError = caughtCopyError as NSError
            }
        }
        
        if let theReadError = readError, !readSucceeded {
            // assert: read failed, readError describes our reading error
            NSLog("%@","zipping failed")
            errorToThrow =  theReadError
        }
        else if readError == nil && !readSucceeded  {
            NSLog("%@","NSFileCoordinator has violated its API contract. It has errored without throwing an error object")
            errorToThrow = NSError.init(domain: Bundle.main.bundleIdentifier!, code: 0, userInfo: nil)
        }
        else if let theCopyError = copyError {
            // assert: read succeeded, copy failed
            NSLog("%@","zipping succeeded but copying the zip file failed")
            errorToThrow = theCopyError
        }
        
        if srcDirIsTemporary {
            do {
                try fm.removeItem(at: srcDir)
            }
            catch {
                // Not going to throw, because we do have a valid output to return. We're going to rely on
                // the operating system to eventually cleanup the temporary directory.
                NSLog("%@","Warning. Zipping succeeded but could not remove temporary directory afterwards")
            }
        }
        if let error = errorToThrow { throw error }
        return destURL
    }
}
